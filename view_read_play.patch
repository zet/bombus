Index: src/io/file/browse/Browser.java
===================================================================
--- src/io/file/browse/Browser.java	(revision 749)
+++ src/io/file/browse/Browser.java	(working copy)
@@ -29,6 +29,8 @@
 import ui.VirtualElement;
 import ui.VirtualList;
 
+import io.file.view.ShowFile;
+
 /**
  *
  * @author evgs
@@ -125,6 +127,21 @@
     public void eventOk() {
         String f=((FileItem)getFocusedObject()).name;
         if (!f.endsWith("/")) {
+            if (f.endsWith(".wav") || f.endsWith(".mid") || f.endsWith(".amr") || f.endsWith(".wav") || f.endsWith(".mp3") || f.endsWith(".aac")) {
+                    System.out.println("play "+f);
+                    new ShowFile(display, path+f, 1);
+                    return;
+            }
+            if (f.endsWith(".png") || f.endsWith(".bmp") || f.endsWith(".gif") || f.endsWith(".jpg")) {
+                    System.out.println("view "+f);
+                    new ShowFile(display, path+f, 2);
+                    return;
+            }
+            if (f.endsWith(".txt")) {
+                    System.out.println("read "+f);
+                    new ShowFile(display, path+f, 3);
+                    return;
+            }
             if (browserListener==null) return;
             destroyView();
             browserListener.BrowserFilePathNotify(path+f);
Index: src/io/file/view/ShowFile.java
===================================================================
--- src/io/file/view/ShowFile.java	(revision 0)
+++ src/io/file/view/ShowFile.java	(revision 0)
@@ -0,0 +1,117 @@
+/*
+ * ShowFile.java
+ *
+ * Created on 9 ќкт€брь 2006 г., 14:00
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package io.file.view;
+
+import Client.Msg;
+import io.file.FileIO;
+import java.io.IOException;
+import java.io.InputStream;
+import javax.microedition.io.Connector;
+import javax.microedition.io.file.FileConnection;
+import javax.microedition.lcdui.*;
+import javax.microedition.media.Manager;
+import javax.microedition.media.MediaException;
+import javax.microedition.media.Player;
+import locale.SR;
+
+/**
+ *
+ * @author User
+ */
+public class ShowFile implements CommandListener{
+    
+    private Display display;
+    private Displayable parentView;
+    
+    private Command back = new Command("Back", Command.BACK, 2);
+    private Command stop = new Command("Stop", Command.BACK, 3);
+
+    private int len;
+
+    private byte[] b;
+
+    private Player pl;
+    
+    public ShowFile(Display display, String fileName, int type) {
+        this.display=display;
+        parentView=display.getCurrent();
+        
+        if (type==1) play(fileName);
+        if (type==2) view(fileName);
+        if (type==3) read(fileName);
+    }
+	private void load(String file) {
+            try {
+                FileIO f=FileIO.createConnection(file);
+                InputStream is=f.openInputStream();
+                len=(int)f.fileSize();
+                b=new byte[len];
+
+                is.read(b);
+                is.close();
+                f.close();
+            } catch (Exception e) {}
+        }
+        
+	private void view(String file) {
+            load(file);
+            Image img = Image.createImage(b, 0, len);
+
+            Form form = new Form(file);
+            form.append(new Spacer(10, 10));
+            form.append(new ImageItem(null, img, ImageItem.LAYOUT_CENTER | ImageItem.LAYOUT_NEWLINE_BEFORE, "[image]"));
+
+            form.addCommand(back);
+            form.setCommandListener(this);
+            display.setCurrent(form);
+	}    
+    
+	private void read(String file) {
+            load(file);
+            TextBox tb = new TextBox(file+"("+len+" bytes)", null, len, TextField.ANY | TextField.UNEDITABLE);
+
+            tb.addCommand(back);
+            tb.setCommandListener(this);
+
+            if (len > 0) tb.setString(new String(b, 0, len));
+
+            tb.setCommandListener(this);
+            display.setCurrent(tb);
+	}    
+    
+	private void play(String file) {
+            try {
+
+                pl = Manager.createPlayer("file://" + file);
+                pl.realize();
+                pl.start();
+            } catch (IOException ex) {
+                ex.printStackTrace();
+            } catch (MediaException ex) {
+                ex.printStackTrace();
+            }
+
+		Alert a = new Alert("Play", "Playing" + " " + file, null, null);
+		a.addCommand(stop);
+                a.addCommand(back);
+		a.setCommandListener(this);
+		display.setCurrent(a);
+	}
+    
+    public void commandAction(Command c, Displayable d) {
+        if (c==back) display.setCurrent(parentView);
+        if (c==stop) {
+		try {
+                    pl.stop();
+                    pl.close();
+		} catch (Exception e) { }
+        }
+    }
+}
\ No newline at end of file
Index: src/io/file/view/ShowFile.java
===================================================================
--- src/io/file/view/ShowFile.java	(revision 0)
+++ src/io/file/view/ShowFile.java	(revision 0)
@@ -0,0 +1,117 @@
+/*
+ * ShowFile.java
+ *
+ * Created on 9 ќкт€брь 2006 г., 14:00
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package io.file.view;
+
+import Client.Msg;
+import io.file.FileIO;
+import java.io.IOException;
+import java.io.InputStream;
+import javax.microedition.io.Connector;
+import javax.microedition.io.file.FileConnection;
+import javax.microedition.lcdui.*;
+import javax.microedition.media.Manager;
+import javax.microedition.media.MediaException;
+import javax.microedition.media.Player;
+import locale.SR;
+
+/**
+ *
+ * @author User
+ */
+public class ShowFile implements CommandListener{
+    
+    private Display display;
+    private Displayable parentView;
+    
+    private Command back = new Command("Back", Command.BACK, 2);
+    private Command stop = new Command("Stop", Command.BACK, 3);
+
+    private int len;
+
+    private byte[] b;
+
+    private Player pl;
+    
+    public ShowFile(Display display, String fileName, int type) {
+        this.display=display;
+        parentView=display.getCurrent();
+        
+        if (type==1) play(fileName);
+        if (type==2) view(fileName);
+        if (type==3) read(fileName);
+    }
+	private void load(String file) {
+            try {
+                FileIO f=FileIO.createConnection(file);
+                InputStream is=f.openInputStream();
+                len=(int)f.fileSize();
+                b=new byte[len];
+
+                is.read(b);
+                is.close();
+                f.close();
+            } catch (Exception e) {}
+        }
+        
+	private void view(String file) {
+            load(file);
+            Image img = Image.createImage(b, 0, len);
+
+            Form form = new Form(file);
+            form.append(new Spacer(10, 10));
+            form.append(new ImageItem(null, img, ImageItem.LAYOUT_CENTER | ImageItem.LAYOUT_NEWLINE_BEFORE, "[image]"));
+
+            form.addCommand(back);
+            form.setCommandListener(this);
+            display.setCurrent(form);
+	}    
+    
+	private void read(String file) {
+            load(file);
+            TextBox tb = new TextBox(file+"("+len+" bytes)", null, len, TextField.ANY | TextField.UNEDITABLE);
+
+            tb.addCommand(back);
+            tb.setCommandListener(this);
+
+            if (len > 0) tb.setString(new String(b, 0, len));
+
+            tb.setCommandListener(this);
+            display.setCurrent(tb);
+	}    
+    
+	private void play(String file) {
+            try {
+
+                pl = Manager.createPlayer("file://" + file);
+                pl.realize();
+                pl.start();
+            } catch (IOException ex) {
+                ex.printStackTrace();
+            } catch (MediaException ex) {
+                ex.printStackTrace();
+            }
+
+		Alert a = new Alert("Play", "Playing" + " " + file, null, null);
+		a.addCommand(stop);
+                a.addCommand(back);
+		a.setCommandListener(this);
+		display.setCurrent(a);
+	}
+    
+    public void commandAction(Command c, Displayable d) {
+        if (c==back) display.setCurrent(parentView);
+        if (c==stop) {
+		try {
+                    pl.stop();
+                    pl.close();
+		} catch (Exception e) { }
+        }
+    }
+}
\ No newline at end of file
